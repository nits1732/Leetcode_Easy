Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.




class Solution {
public:
    int squareDigit(int n){
        int ans=0;
        while(n!=0){
            int r=n%10;
            ans=ans+pow(r,2);
            n=n/10;
        }
        return ans;
    }
    bool isHappy(int n) {
        //floyd cycle algorithm: in this the slow move one at a time and the fast moves two at a time. It it used to detect the cycle in the linked list/ number or any other data structure
        int s=n, f=n;
        do{
            s=squareDigit(s);
            f=squareDigit(squareDigit(f)); 
        }while(s!=f);
           return s==1;
    }
};
