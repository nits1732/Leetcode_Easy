Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 
 
 class Solution {
public:
    int singleNumber(vector<int>& nums) {
        // unordered map approach , in this we are storing number into the maps thererfore we are using the O(n) memory space 
        // unordered_map<int, int > m;
        // for(auto a:nums)m[a]++;
        // for(auto x:m)if(x.second!=2)return x.first;
        // return -1;
        
        // using the xor operation: we will conver the number into the binary form and the xor operation on the same number will return the 0, and if it will return the same number then that number is occured once in the array
        
        int ans=0;
        for(auto x:nums)ans=x^ans;
        return ans;
    }
};
