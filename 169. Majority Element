Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

 
 
 class Solution {
public:
    int majorityElement(vector<int>& nums) {
        
    //using the map O(n) space compexity and O(n) time
        // int mo=nums.size()/2;
        // unordered_map<int,int> m;
        // for(auto a:nums){
        //     m[a]++;
        //     if(m[a]>mo)return a;
        // }
        // return -1;
        
        //approach 2 : using the sorting of array and sliding window
        // sort(nums.begin(),nums.end());
        // return nums[nums.size()/2];
        
        
        //approach 3: using the candidate and the votes
        int c=0, v=0;
        for(auto x:nums){
            if(v==0)c=x;
            if(c==x) v++;
            else v--;
        }
        return c;
    }
};
