Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.



solution
//////////////



class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& interval) {
        //if i put all the element to the vector and then pick the two element and make the pair
        //Ex [[1,3][2,6][8,10]]
        //    [1, 3, 2 , 6 , 8 , 10]
        //        comapre form i and i+1 if they are overlaaping then i will skip those element and then look for the next element 
    //     vector<int> v;
    //     vector<vector<int>> ans1;
    //     for(int i=0;i<intervals.size();i++){
    //         for(int j=0;j<2;i++){
    //             v.push_back(intervals[i][j]);
    //         }    
    //     }
    //     int i=1;
    //     while(i<v.size()){
    //         vector<int> ans;
    //         if(v[i]>v[i+1]){
    //             ans.push_back(v[i-1]);
    //             ans.push_back(v[i+2]);
    //             i=i+4;
    //         }else{
    //             ans.push_back(v[i-1]);
    //             ans.push_back(v[i]);
    //             i=i+2;
    //         }
    //         ans1.push_back(ans);
    //     }
    //     return ans1;
    vector<vector<int>> ans;
    if(interval.size()==0){
        return ans;
    }
        sort(interval.begin(),interval.end());
        
        vector<int> temp= interval[0];
        for(auto i:interval){
            if(temp[1]>=i[0]){
                temp[1]=max(temp[1],i[1]);
            }else{
                ans.push_back(temp);
                temp=i;
            }
        }
        ans.push_back(temp);
        return ans;
    }
};
